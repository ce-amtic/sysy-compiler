# include < stdio . h > -> ExternalDef
ExternalDef -> CompUnit
int main -> FuncName
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
a = Exp -> VarDef
VarDef -> VarDefList
int VarDefList ; -> VarDecl
VarDecl -> Decl
Decl -> BlockItem
BlockItem -> BlockItemlist
2 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
b = Exp -> VarDef
VarDef -> VarDefList
int VarDefList ; -> VarDecl
VarDecl -> Decl
Decl -> BlockItem
BlockItemlist BlockItem -> BlockItemlist
a -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
b -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
AddExp + MulExp -> AddExp
AddExp -> Exp
c = Exp -> VarDef
VarDef -> VarDefList
int VarDefList ; -> VarDecl
VarDecl -> Decl
Decl -> BlockItem
BlockItemlist BlockItem -> BlockItemlist
__base_str -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> FuncRParams
c -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
FuncRParams , Exp -> FuncRParams
printf ( FuncRParams ) -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp ; -> Stmt
Stmt -> BlockItem
BlockItemlist BlockItem -> BlockItemlist
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
return Exp ; -> Stmt
Stmt -> BlockItem
BlockItemlist BlockItem -> BlockItemlist
{ BlockItemlist } -> Block
FuncName ( ) Block -> FuncDef
CompUnit FuncDef -> CompUnit
